{"version":3,"sources":["components/rightSide.js","App.js","reportWebVitals.js","index.js"],"names":["RightHandSide","state","posts","className","href","this","props","url_overridden_by_dest","target","rel","title","domain","name","num_comments","React","Component","App","downVoteFunction","data","child","node","ReactDOM","findDOMNode","i","HTMLElement","querySelectorAll","outerText","ups","innerHTML","upVoteFunction","axios","get","then","response","children","setState","map","post","type","src","alt","width","onClick","thumbnail","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","document","getElementById"],"mappings":"sQAKMA,E,4MAEFC,MAAQ,CACNC,MAAM,I,4CAKR,WACI,OAEE,sBAAKC,UAAU,WAAf,UAEE,oBAAGC,KAASC,KAAKC,MAAMA,MAAMC,uBAAwBC,OAAS,SAASC,IAAI,aAA3E,cAAyF,oBAAIN,UAAY,QAAhB,SAAyBE,KAAKC,MAAMA,MAAMI,WACnI,oBAAGN,KAASC,KAAKC,MAAMA,MAAMC,uBAAwBC,OAAS,SAASC,IAAI,aAA3E,cAAyF,4BAAIJ,KAAKC,MAAMA,MAAMK,SAA9G,OACA,0DAA4B,mBAAGR,UAAY,WAAf,SAA2BE,KAAKC,MAAMA,MAAMM,UACxE,oBAAGT,UAAY,iBAAf,cAAkCE,KAAKC,MAAMA,MAAMO,aAAe,aAAlE,SALF,KAK0F,mBAAGV,UAAY,SAAf,mD,GAhBxEW,IAAMC,WA0BjBf,ICzBVgB,E,4MAELf,MAAQ,CACNC,MAAM,I,EAiBRe,iBAAmB,SAACC,GAClB,IACIC,EADEC,EAAOC,IAASC,YAAT,gBAETC,EAAI,EAIR,IAHIH,aAAgBI,cACjBL,EAAQC,EAAKK,iBAAiB,UAE7BF,EAAI,EAAGA,EAAI,GAAIA,IACbJ,EAAMI,GAAGG,WAAcR,EAAKS,MAC9BR,EAAMI,GAAGK,UAAaV,EAAKS,IAAM,I,EAKvCE,eAAiB,SAACX,GAChB,IACIC,EADEC,EAAOC,IAASC,YAAT,gBAETC,EAAI,EAIR,IAHIH,aAAgBI,cACjBL,EAAQC,EAAKK,iBAAiB,UAE7BF,EAAI,EAAGA,EAAI,GAAIA,IACZJ,EAAMI,GAAGG,WAAcR,EAAKS,MAC/BR,EAAMI,GAAGK,UAAaV,EAAKS,IAAM,I,uDAnCvC,WAAqB,IAAD,OAClBG,IAAMC,IAAN,sCACGC,MAAK,SAAAC,GACJ,IAAM/B,EAAQ+B,EAASf,KAAKA,KAAKgB,SACjC,EAAKC,SAAS,CAAEjC,e,oBAmCtB,WAAS,IAAD,OACJ,OACE,qBAAKC,UAAU,aAAf,SAEA,oBAAIA,UAAY,WAAhB,SACIE,KAAKJ,MAAMC,MAAMkC,KAAI,SAAAC,GAAI,OAAI,qBAAIlC,UAAY,eAAhB,UAE/B,uBAAOmC,KAAK,QAAQC,IAAI,0GAA0GC,IAAM,SAAS5B,KAAK,WAAWT,UAAW,SAAUsC,MAAQ,OAAOC,QAAY,WAAO,EAAKb,eAAeQ,EAAKnB,SACjP,qBAAKf,UAAY,OAAjB,SACEkC,EAAKnB,KAAKS,MAGZ,uBAAOW,KAAK,QAAQC,IAAI,yEAAyE3B,KAAK,WAAW4B,IAAM,WAAWrC,UAAW,WAAYsC,MAAQ,OAAOC,QAAY,WAAO,EAAKzB,iBAAiBoB,EAAKnB,SAEtN,qBAAKqB,IAAOF,EAAKnB,KAAKyB,UAAWH,IAAK,cATP,IAS2B,cAAC,EAAD,CAAelC,MAAS+B,EAAKnB,OATxD,IASiE,qC,GA7DvFJ,IAAMC,WAyEVC,ICnEA4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdxB,IAAS+B,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.22cca926.chunk.js","sourcesContent":["import '../App.css';\r\nimport React from 'react'\r\n\r\n\r\n\r\nclass RightHandSide extends React.Component {\r\n\r\n    state = {\r\n      posts:[]\r\n    }\r\n  \r\n  \r\n\r\n    render(){\r\n        return (\r\n\r\n          <div className=\"rhsBlock\">\r\n             {/* accessing the props from the parent component and displaying the information to the screen */}\r\n            <a href  = {this.props.props.url_overridden_by_dest} target = \"_blank\" rel=\"noreferrer\"> <h1 className = \"title\">{this.props.props.title}</h1></a>\r\n            <a href  = {this.props.props.url_overridden_by_dest} target = \"_blank\" rel=\"noreferrer\"> <p>{this.props.props.domain}</p> </a>\r\n            <p>Submitted x hours ago by <p className = \"userName\">{this.props.props.name}</p></p>\r\n            <p className = \"commentSection\"> {this.props.props.num_comments + \" Comments \"}   </p>  <p className = \"footer\">share save hide report pocket </p>\r\n          </div>\r\n  \r\n  \r\n        );\r\n  \r\n    }\r\n  \r\n  }\r\n  \r\n  export default RightHandSide;\r\n  ","import './App.css'\nimport React from 'react'\nimport axios from 'axios'\nimport RightHandSide from './components/rightSide.js'\nimport ReactDOM from \"react-dom\";\n\n class App extends React.Component {\n\n  state = {\n    posts:[]\n  }\n\n\n// axios pull for data and storing it in an array, which is the state variable above\n  componentDidMount() {\n    axios.get(`https://www.reddit.com/r/pics.json`)\n      .then(response => {\n        const posts = response.data.data.children;\n        this.setState({ posts });\n      })\n  }\n\n  // downvote function call \n  // gets the entire DOM widget and queries for all divs called .test\n  // checks all the outertext of each div and compares to the data given \n  // same functionality as the upVoteFunction\n  downVoteFunction = (data) => {\n    const node = ReactDOM.findDOMNode(this)\n    let child \n    let i = 0;\n    if (node instanceof HTMLElement) {\n       child = node.querySelectorAll('.test');\n  }\n    for(i = 0; i < 25; i++){\n      if( child[i].outerText == (data.ups) ){\n        child[i].innerHTML = (data.ups - 1)\n      }\n    }\n  }\n\n  upVoteFunction = (data) => {\n    const node = ReactDOM.findDOMNode(this)\n    let child \n    let i = 0;\n    if (node instanceof HTMLElement) {\n       child = node.querySelectorAll('.test');\n  }\n    for(i = 0; i < 25; i++){\n      if(  child[i].outerText == (data.ups)   ){\n        child[i].innerHTML = (data.ups + 1)\n      }\n    }\n  }\n  render(){\n      return (\n        <div className=\"outerBlock\">\n        {/* an unordered list that maps the state array that contains API data, currently is going through the array and printing the thumbnail and upvotes */}\n        <ul className = \"listPost\">\n          { this.state.posts.map(post => <li className = \"listElements\"> \n          {/* upvote function   */}\n          <input type=\"image\" src=\"https://www.pngitem.com/pimgs/m/71-715538_reddit-arrow-transparent-background-reddit-upvote-icon-hd.png\" alt = \"upvote\" name=\"saveForm\" className =\"upVote\"  width = \"30px\" onClick = { () => {this.upVoteFunction(post.data)} } />\n          <div className = \"test\">\n           {post.data.ups}\n          </div>\n          {/* downvote function  */}\n          <input type=\"image\" src=\"https://metro.co.uk/wp-content/uploads/2014/12/downvote_1551690908.png\" name=\"saveForm\" alt = \"downvote\" className =\"downVote\"  width = \"30px\" onClick = { () => {this.downVoteFunction(post.data)} }/>\n          {/* calls the thumbail in addition to the rhs class component which contains the title, comments etc. Passign post.data as props */}\n          <img src = {post.data.thumbnail} alt= \"thumbnail\" ></img> <RightHandSide props = {post.data} /> <hr></hr></li> )}\n            \n        </ul>\n        </div>\n\n\n      );\n\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}